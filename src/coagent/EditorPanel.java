/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coagent;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import static sun.jvm.hotspot.HelloWorld.e;

/**
 *
 * @author miche
 */
public class EditorPanel extends javax.swing.JPanel {

    String[] dbTables = {
        "editors",
        "publishers",};
    String[] dbColumns = {
        "Editor_Name",
        "Publisher_Name",
        "Editor_Contact",
        "Editor_Interested_In",};

    String[] dbIds = {};

    /**
     * Creates new form randomJPanel
     * @throws java.lang.Exception
     */
    public EditorPanel() throws Exception {
        initComponents();
        
        editorTable.getColumnModel().getColumn(0).setMinWidth(0);
        editorTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        //addComboBoxItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorTable = new javax.swing.JTable();
        editorSearchField = new javax.swing.JTextField();
        editorClearFields = new javax.swing.JButton();
        editorEditList = new javax.swing.JButton();
        editorPanelAddButton = new javax.swing.JButton();
        showFullListButton = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtInterestedIn = new javax.swing.JTextField();
        txtPublisherName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(190, 227, 219));
        setPreferredSize(new java.awt.Dimension(714, 543));

        editorSearchButton.setText("Search");
        editorSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorSearchButtonActionPerformed(evt);
            }
        });

        editorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Editor Name", "Editor Contact", "Editor Interested In", "Publisher Name"
            }
        ));
        editorTable.setRowHeight(40);
        editorTable.setSelectionForeground(new java.awt.Color(255, 102, 102));
        jScrollPane1.setViewportView(editorTable);
        if (editorTable.getColumnModel().getColumnCount() > 0) {
            editorTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        editorSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editorSearchFieldKeyPressed(evt);
            }
        });

        editorClearFields.setText("Clear list");
        editorClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorClearFieldsActionPerformed(evt);
            }
        });

        editorEditList.setText("Edit list");
        editorEditList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorEditListActionPerformed(evt);
            }
        });

        editorPanelAddButton.setText("Add to list");
        editorPanelAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorPanelAddButtonActionPerformed(evt);
            }
        });

        showFullListButton.setText("Show full list");
        showFullListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFullListButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Editor Name:");

        jLabel2.setText("Editor Contact:");

        jLabel3.setText("Editor Interested In:");

        jLabel4.setText("Publisher Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editorSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(editorSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showFullListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editorClearFields, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editorEditList, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtInterestedIn)
                                    .addComponent(txtContact)
                                    .addComponent(txtPublisherName, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editorPanelAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(136, 136, 136))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorSearchButton)
                    .addComponent(editorClearFields)
                    .addComponent(editorEditList)
                    .addComponent(editorSearchField)
                    .addComponent(showFullListButton))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editorPanelAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtInterestedIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtPublisherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editorSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorSearchButtonActionPerformed
        String editorSearchString = editorSearchField.getText();
        String editorQueryString;

        String publisherQueryString;

        if (editorSearchString.equals("")) {
            editorQueryString = 
                    "SELECT editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Editor_Id)";
  

        } else {
            editorQueryString = "SELECT editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Editor_Id) "
                    
                    + "WHERE (editors.Editor_Name LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Contact LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Interested_In LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "Publisher_Name LIKE '" + editorSearchString + "%'"
                    + ");";
            
            editorSearchField.setText("");
            
        }

        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            //Creating Object []rowData for jTable's Table Model
            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_editorSearchButtonActionPerformed


    private void editorClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorClearFieldsActionPerformed

        DefaultTableModel dm = (DefaultTableModel) editorTable.getModel();
        while (dm.getRowCount() > 0) {
            dm.removeRow(0);
        }
    }//GEN-LAST:event_editorClearFieldsActionPerformed

    private void editorEditListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorEditListActionPerformed

        
        String editorName = txtName.getText();
        String editorContact = txtContact.getText();
        String editorInterestedIn = txtInterestedIn.getText();
        String publisherName = txtPublisherName.getText();
    
        try {
            
            Connection con = Coagent.getConnection();
            Statement stm = con.createStatement();
            
            int row = editorTable.getSelectedRow();
            String value = editorTable.getValueAt(row, 0).toString();
            int idnr = Integer.parseInt(value);
            
            String sql = "UPDATE clients SET "
                    + "Editor_Id = '"+idnr+"', "
                    + "Editor_Name = '"+editorName+"', "
                    + "Editor_Contact = '"+editorContact+"', "
                    + "Editor_Interested_In = '"+editorInterestedIn+"' "
                    + "Publisher_Name = '"+publisherName+"' "
                    + "WHERE Editor_Id = '"+idnr+"'";
            
            if (editorName.isEmpty()){
                JOptionPane.showMessageDialog(null, "You need to enter a name");
            }
            
            else {
                stm.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update succesfully");
            }

            
        }catch (Exception e){System.out.println("Error!");} 
        
    
    }//GEN-LAST:event_editorEditListActionPerformed

    private void editorPanelAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorPanelAddButtonActionPerformed

        addEditor();               
    }//GEN-LAST:event_editorPanelAddButtonActionPerformed
        
    private void editorSearchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorSearchFieldKeyPressed
        
        String editorSearchString = editorSearchField.getText();
        
        String editorQueryString = null;
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             editorQueryString = 
                     "SELECT editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Editor_Id)";
        
        } if (evt.getKeyCode() == KeyEvent.VK_ENTER) { 
            editorQueryString = "SELECT editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Editor_Id) "
                    
                    + "WHERE (editors.Editor_Name LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Contact LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Interested_In LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "Publisher_Name LIKE '" + editorSearchString + "%'"
                    + ");";
            
            editorSearchField.setText("");
        }
        
        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            //Creating Object []rowData for jTable's Table Model
            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
        
        
    }//GEN-LAST:event_editorSearchFieldKeyPressed

    private void showFullListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFullListButtonActionPerformed
        
        String editorQueryString = null;
        
         editorQueryString = 
                     "SELECT editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Editor_Id)";
        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            //Creating Object []rowData for jTable's Table Model
            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_showFullListButtonActionPerformed
    @SuppressWarnings("unchecked")
    
        
    public void addEditor(){
        String editorName = txtName.getText();
        String editorContact = txtContact.getText();
        String editorInterestedIn = txtInterestedIn.getText();
        String publisherName = txtPublisherName.getText();
        
        try{
            Connection con = Coagent.getConnection();
            Statement stm = con.createStatement();
            String sql = "INSERT INTO clients(Clients_Name, Clients_Contact, Clients_Email) VALUES('"+editorName+"', '"+editorContact+"', '"+editorInterestedIn+"')";
            
            // vill inte ha ett namn som är en tom sträng
            if (editorName.isEmpty()){
                JOptionPane.showMessageDialog(null, "You need to enter a name");
            }
            else{
                stm.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Editor is added");
            }    

        } catch (Exception e){System.out.println("e");}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editorClearFields;
    private javax.swing.JButton editorEditList;
    private javax.swing.JButton editorPanelAddButton;
    private javax.swing.JButton editorSearchButton;
    private javax.swing.JTextField editorSearchField;
    private javax.swing.JTable editorTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showFullListButton;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtInterestedIn;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPublisherName;
    // End of variables declaration//GEN-END:variables
}
