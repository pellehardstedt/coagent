/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coagent;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author miche
 */
public class EditorPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form randomJPanel
     * @throws java.lang.Exception
     */
    public EditorPanel() throws Exception {
        initComponents();
        
        //Gör Id kolumnem i min JTable osynlig men jag behöver id-numret sparat någonstans för att kunna referera till editors id-nummer när man tar 
        //bort någon eller ändrar en editor.
        //Anledningen till att jag gör det osynligt för att jag tycker det är onödigt för en användare att få se den informationen.
        editorTable.getColumnModel().getColumn(0).setMinWidth(0);
        editorTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        //Sätter färgen på min Jtable
        JTableHeader headerSearch = editorTable.getTableHeader();
        headerSearch.setBackground( new Color(190, 227, 219) );
        headerSearch.setForeground( new Color(85, 91, 110) );
        
        addComboBox();
        addComboBoxTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorTable = new javax.swing.JTable();
        editorSearchField = new javax.swing.JTextField();
        editorClearFields = new javax.swing.JButton();
        editorEditList = new javax.swing.JButton();
        editorPanelAddButton = new javax.swing.JButton();
        showFullListButton = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtInterestedIn = new javax.swing.JTextField();
        txtPublisherName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxAdd = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(190, 227, 219));
        setPreferredSize(new java.awt.Dimension(714, 543));

        editorSearchButton.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        editorSearchButton.setText("Search");
        editorSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorSearchButtonActionPerformed(evt);
            }
        });

        editorTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        editorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Editor Name", "Editor Contact", "Editor Interested In", "Publisher Name"
            }
        ));
        editorTable.setRowHeight(40);
        editorTable.setSelectionForeground(new java.awt.Color(255, 102, 102));
        jScrollPane1.setViewportView(editorTable);
        if (editorTable.getColumnModel().getColumnCount() > 0) {
            editorTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        }

        editorSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editorSearchFieldKeyPressed(evt);
            }
        });

        editorClearFields.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        editorClearFields.setText("Clear list");
        editorClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorClearFieldsActionPerformed(evt);
            }
        });

        editorEditList.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        editorEditList.setText("Edit list");
        editorEditList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorEditListActionPerformed(evt);
            }
        });

        editorPanelAddButton.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        editorPanelAddButton.setText("Add to list");
        editorPanelAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorPanelAddButtonActionPerformed(evt);
            }
        });

        showFullListButton.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        showFullListButton.setText("Show full list");
        showFullListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFullListButtonActionPerformed(evt);
            }
        });

        txtPublisherName.setText("New Publisher");
        txtPublisherName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPublisherNameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jLabel1.setText("Editor Name:");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jLabel2.setText("Editor Contact:");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jLabel3.setText("Editor Interested In:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jLabel4.setText("Publisher Name:");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        jLabel5.setText("Editors");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jComboBoxAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPublisherName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editorPanelAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(82, 82, 82))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtInterestedIn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editorSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editorSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showFullListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editorClearFields, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editorEditList, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel5)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorSearchField)
                    .addComponent(editorSearchButton)
                    .addComponent(showFullListButton)
                    .addComponent(editorClearFields)
                    .addComponent(editorEditList))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtInterestedIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBoxAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPublisherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editorPanelAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Nedan följer kod för att ge användaren möjligheten att kunna söka efter Editors i vår Editor tabell i coagent databasen.
    
    private void editorSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorSearchButtonActionPerformed
        String editorSearchString = editorSearchField.getText();
        String editorQueryString;

        String publisherQueryString;

        //En QueryString som hämtar all info från databasen om sökfältet (editorSearchField) lämnas tomt.
        
        if (editorSearchString.equals("")) {
            editorQueryString = 
                    "SELECT editors.Editor_Id, "
                    + "editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Publisher_Publisher_Id)";
  
        //En QueryString som hämtar den info som användaren matar in i sökfältet från databasen
        //Exempelvis kan det vara ett specifikt namn på en editor.
        
        } else {
            editorQueryString = "SELECT editors.Editor_Id, "
                    + "editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Publisher_Publisher_Id) "
                    
                    + "WHERE (editors.Editor_Name LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Contact LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Interested_In LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "Publisher_Name LIKE '" + editorSearchString + "%'"
                    + ");";
            
            
            editorSearchField.setText("");
            
        }
        
        // Skickar en förfrågan till databas om en connection och vad som skall göras, i detta fall skickas editorQueryString in.
        
        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            //Fyller min JTable med data från databasen.
            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_editorSearchButtonActionPerformed

    //Denna kod gör att knappen Clear fields kan radera all data från min JTable om användaren skulle vilja
    //göra en ny sökning.
    
    private void editorClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorClearFieldsActionPerformed

        DefaultTableModel dm = (DefaultTableModel) editorTable.getModel();
        while (dm.getRowCount() > 0) {
            dm.removeRow(0);
        }
    }//GEN-LAST:event_editorClearFieldsActionPerformed
    
    //Nedan följer kod för knappen Edit list som ger användaren möjligheten att kunna redigera fälten i mitt JTable
    //för att sedan kunna uppdatera informationen som ändrats, ändringarna skickas till databasen som sedan kan presentera det
    //på nytt i JTable.
    
    private void editorEditListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorEditListActionPerformed

        DefaultTableModel tblModel = (DefaultTableModel) editorTable.getModel();
        
        String tblName = tblModel.getValueAt(editorTable.getSelectedRow(), 1).toString();
        String tblContact = tblModel.getValueAt(editorTable.getSelectedRow(), 2).toString();
        String tblInterestedIn = tblModel.getValueAt(editorTable.getSelectedRow(), 3).toString();
        
        
        String editorName = txtName.getText();
        String editorContact = txtContact.getText();
        String editorInterestedIn = txtInterestedIn.getText();
        String publisherName = tblModel.getValueAt(editorTable.getSelectedRow(), 4).toString();
        Integer publisherId = 0;
    
        try {
            
            Connection con = Coagent.getConnection();
            Statement stm = con.createStatement();
            
            int row = editorTable.getSelectedRow();
            String value = editorTable.getValueAt(row, 0).toString();
            int idnr = Integer.parseInt(value);
            
            PreparedStatement query = con.prepareStatement("SELECT Publisher_Id FROM publishers WHERE Publisher_Name = '" + publisherName + "';" );
            ResultSet result = query.executeQuery();
            if(result.next()) {
                publisherId = result.getInt(1);
            }
            String sql = "UPDATE editors SET "
            + "Editor_Id = "+idnr+", "
            + "Editor_Name = '"+tblName+"', "
            + "Editor_Contact = '"+tblContact+"', "
            + "Editor_Interested_In = '"+tblInterestedIn+"', "
            + "Publisher_Publisher_Id = "+publisherId+" "
            + "WHERE Editor_Id = "+idnr+"";
            
            /*
            if(editorContact.equals("")) {
                sql = "UPDATE editors SET "
                + "Editor_Id = "+idnr+", "
                + "Editor_Name = '"+tblName+"', "
                + "Editor_Interested_In = '"+tblInterestedIn+"', "
                + "Publisher_Publisher_Id = "+publisherId+" "
                + "WHERE Editor_Id = "+idnr+"";
            }
            */
           
            if (tblName.isEmpty()){
                JOptionPane.showMessageDialog(null, "You need to enter a name");
            }
            
            else {
                stm.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Edit succesfull");
            }

            
        }catch (Exception e){System.out.println(e);} 
        
        editorTable.clearSelection();
    
    }//GEN-LAST:event_editorEditListActionPerformed

    //Knappen Add editor kallas på en metod som heter addEditor(); som finns dokumenterad utförligare längre ner i detta projekt.
    private void editorPanelAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorPanelAddButtonActionPerformed
        addEditor();               
    }//GEN-LAST:event_editorPanelAddButtonActionPerformed
        
    //Följande kod ger användaren möjlighet att kunna använda sig av knappen ENTER i sina sökningar. Koden är likadan som i
    //editorSearchButton förrutom raden med KeyEvent.VK_ENTER som då är tillför att programmet ska reagera på knappen ENTER.
    
    private void editorSearchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorSearchFieldKeyPressed
        
        String editorSearchString = editorSearchField.getText();
        
        String editorQueryString = null;
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             editorQueryString = 
                    "SELECT editors.Editor_Id,"
                    + "editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Publisher_Publisher_Id)";
        
        } if (evt.getKeyCode() == KeyEvent.VK_ENTER) { 
            editorQueryString = 
                    "SELECT editors.Editor_Id,"
                    + "editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Publisher_Publisher_Id) "
                    
                    + "WHERE (editors.Editor_Name LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Contact LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "editors.Editor_Interested_In LIKE '" + editorSearchString + "%'"
                    + " OR "
                    + "Publisher_Name LIKE '" + editorSearchString + "%'"
                    + ");";
            
            editorSearchField.setText("");
        }
        
        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_editorSearchFieldKeyPressed

    //Ger användaren möjligheten att med ett knapptryck hämta all data från databasen. Återigen är det väldigt likt koden som ligger under
    //editorSearchButton bara att den ligger under show FullListButton
    private void showFullListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFullListButtonActionPerformed
        
        String editorQueryString = null;
        
         editorQueryString = 
                     "SELECT editors.Editor_Id, "
                    + "editors.Editor_Name, "
                    + "editors.Editor_Contact, "
                    + "editors.Editor_Interested_In, "
                    + "publishers.Publisher_Name "
                    + "FROM (editors INNER JOIN publishers ON publishers.Publisher_Id = editors.Publisher_Publisher_Id)";
        try {
            Connection con = Coagent.getConnection();
            PreparedStatement query = con.prepareStatement(editorQueryString);
            ResultSet result = query.executeQuery();

            while (editorTable.getRowCount() > 0) {
                ((DefaultTableModel) editorTable.getModel()).removeRow(0);
            }

            int columns = result.getMetaData().getColumnCount();
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i); // 1
                }
                ((DefaultTableModel) editorTable.getModel()).insertRow(result.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_showFullListButtonActionPerformed

    private void txtPublisherNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPublisherNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPublisherNameActionPerformed
    @SuppressWarnings("unchecked")
    
    //Ger användaren möjligheten att kunna lägga till nya editors till databasen via programmet. 
    public void addEditor(){
        
        //Hämtar värdet som användaren har fyllt i fälten för att sedan kunna använda detta i en förfrågan som skickas till databasen.
        String editorName = txtName.getText();
        String editorContact = txtContact.getText();
        String editorInterestedIn = txtInterestedIn.getText();
        String publisherName;
        int publisherId = 0;
        
        try{
            Connection con = Coagent.getConnection();
            if(!txtPublisherName.getText().equals("New Publisher")) {
                publisherName = txtPublisherName.getText();

                PreparedStatement query = con.prepareStatement("INSERT INTO publishers (Publishers_Name) VALUES('" + publisherName + "');");
                int result = query.executeUpdate();
            } else {
                publisherName = String.valueOf(jComboBoxAdd.getSelectedItem());
            }
            PreparedStatement query = con.prepareStatement("SELECT Publisher_Id FROM publishers WHERE Publisher_Name = '" + publisherName + "';" );
            ResultSet result = query.executeQuery();
            if(result.next()) {
                publisherId = result.getInt(1);
            }

            //En förfrågan till databasen med en Sträng som säger att värdet från de ifyllda fälten matas in i tabellens olika kolumner

            Statement stm = con.createStatement();
            String sql = "INSERT INTO editors(Editor_Name, Editor_Contact, Editor_Interested_In, Publisher_Publisher_Id) VALUES('"+editorName+"', '"+editorContact+"', '"+editorInterestedIn+"', '"+publisherId+"')";
            
            //Vill inte ha ett namn som är en tom sträng
            if (editorName.isEmpty()){
                JOptionPane.showMessageDialog(null, "You need to enter a name");
            }
            else{
                stm.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Editor is added");
            }    

        } catch (Exception e){System.out.println("Error!");}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editorClearFields;
    private javax.swing.JButton editorEditList;
    private javax.swing.JButton editorPanelAddButton;
    private javax.swing.JButton editorSearchButton;
    private javax.swing.JTextField editorSearchField;
    private javax.swing.JTable editorTable;
    private javax.swing.JComboBox<String> jComboBoxAdd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showFullListButton;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtInterestedIn;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPublisherName;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void addComboBox() throws Exception{

        Connection con = Coagent.getConnection();
        PreparedStatement query = con.prepareStatement("SELECT Publisher_Name FROM publishers;");
        ResultSet result = query.executeQuery();

        while(result.next()){
            jComboBoxAdd.addItem(result.getString(1));
        }
    }
    
    @SuppressWarnings("unchecked")
    private void addComboBoxTable() throws Exception{
        TableColumn column = editorTable.getColumnModel().getColumn(4);
        JComboBox comboBox = new JComboBox();
        Connection con = Coagent.getConnection();
        PreparedStatement query = con.prepareStatement("SELECT Publisher_Name FROM publishers;");
        ResultSet result = query.executeQuery();

        while(result.next()){
            comboBox.addItem(result.getString(1));
        }
        column.setCellEditor(new DefaultCellEditor(comboBox));
    }
}

